function [OA,OB] = otalsm(x,N,TraceType,TraceOrder,NTraces,Theta,StP,deltaT,showerr)
%ITVDFT performs improved time variant discrete Fourier transform
% usage: itvdft(x,N,TraceType,TraceOrder,NTraces,Theta,StP,deltaT,OCMEnabled)
% INPUTS:
% x: input signal (starting from 1 index)
% Theta : angular data (1-based index)
% TraceType,TraceOrder,NTrace: order information
% NTraces: number of traces
% TraceType: 0 : Order, 1: fixed frequency
% TraceOrder: order multplier or frequency
% OCMEnable: 1: OCM enabled, 0:disabled
% StP: processing time start point (used for fixed frequency traces)
% deltaT = 1 /(Sample Rate)
% OUTPUTS:
% OA, OB: vectors containing order amplitude and phase (Real and Imaginary
% data)
OA = zeros(NTraces,1);
OB = zeros(NTraces,1);
Phi = zeros(N,NTraces);
B = zeros(N,NTraces*2);
%prepare angular data
for j=1:NTraces
    for i=1:N
        if TraceType(j) == 0 %order
            Phi(i,j) = TraceOrder(j)*Theta(i);
        end
         if TraceType(j) == 1 %fixed frequency in Hz
            Phi(i,j) = 2 * pi * TraceOrder(j) * (StP + i -1) * deltaT;
        end
    end
end
z=1000; %to avoid small values
NOrder = NTraces;

for k=1:N   
    for i = 0:NOrder - 1
        B(k,i * 2 + 1) = cos(Phi(k,i+1));
        B(k,i * 2 + 2) = sin(Phi(k,i+1));
    end   
end

% AC=pinv(B)*x;
AC=inv(B'*B)*B'*x;%yet another method
 for i = 0:NOrder - 1
     OA(i + 1) = AC(2 * i + 1);
     OB(i + 1) = AC(2 * i + 2);
 end
if(showerr > 0)
  err=x-B*AC;
  plot(err);
end

end


